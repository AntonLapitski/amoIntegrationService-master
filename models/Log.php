<?php

namespace app\models;

use Yii;

/**
 * Class Log
 * This is the model class for table "log".
 *
 * @property int $id
 * @property int $sid
 * @property int $config_id
 * @property string $event_sid
 * @property array $data
 *
 * @property Config $config
 * @package app\models
 */
class Log extends \yii\db\ActiveRecord
{
    /**
     * Возвращает название таблицы
     *
     * @return string
     */
    public static function tableName()
    {
        return 'log';
    }

    /**
     * Правила валидации входных параметров
     *
     * @return array
     */
    public function rules()
    {
        return [
            [['config_id'], 'integer'],
            [['data'], 'safe'],
            [['event_sid', 'sid'], 'string', 'max' => 255],
            [['config_id'], 'exist', 'skipOnError' => true, 'targetClass' => Config::className(), 'targetAttribute' => ['config_id' => 'id']],
            [['sid'], 'unique'],
        ];
    }

    /**
     * Названия валидационных входных параметров
     *
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'config_id' => 'Config ID',
            'event_sid' => 'Event Sid',
            'contact' => 'Contact',
            'lead' => 'Lead',
            'customer' => 'Customer',
            'user' => 'User',
            'settings' => 'Settings',
        ];
    }

    /**
     * Действие перед сохранением
     *
     * @param $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if($this->isNewRecord)
            $this->sid = 'LG'.md5($this->event_sid.time().rand(1000, 9999));

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[Config]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getConfig()
    {
        return $this->hasOne(Config::className(), ['id' => 'config_id']);
    }
}
